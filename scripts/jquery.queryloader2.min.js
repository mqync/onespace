/*
 * QueryLoader v2 - A simple script to create a preloader for images
 *
 * For instructions read the original post:
 * http://www.gayadesign.com/diy/queryloader2-preload-your-images-with-ease/
 *
 * Copyright (c) 2011 - Gaya Kessler
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Version:  2.9.0
 * Last update: 2014-01-31
 */
 (function($) {
    (function(window) {
        'use strict';
        var docElem = document.documentElement;
        var bind = function() {};

        function getIEEvent(obj) {
            var event = window.event;
            event.target = event.target || event.srcElement || obj;
            return event
        }
        if (docElem.addEventListener) {
            bind = function(obj, type, fn) {
                obj.addEventListener(type, fn, false)
            }
        } else if (docElem.attachEvent) {
            bind = function(obj, type, fn) {
                obj[type + fn] = fn.handleEvent ?
                function() {
                    var event = getIEEvent(obj);
                    fn.handleEvent.call(fn, event)
                } : function() {
                    var event = getIEEvent(obj);
                    fn.call(obj, event)
                };
                obj.attachEvent("on" + type, obj[type + fn])
            }
        }
        var unbind = function() {};
        if (docElem.removeEventListener) {
            unbind = function(obj, type, fn) {
                obj.removeEventListener(type, fn, false)
            }
        } else if (docElem.detachEvent) {
            unbind = function(obj, type, fn) {
                obj.detachEvent("on" + type, obj[type + fn]);
                try {
                    delete obj[type + fn]
                } catch (err) {
                    obj[type + fn] = undefined
                }
            }
        }
        var eventie = {
            bind: bind,
            unbind: unbind
        };
        if (typeof define === 'function' && define.amd) {
            define(eventie)
        } else if (typeof exports === 'object') {
            module.exports = eventie
        } else {
            window.eventie = eventie
        }
    })(this);
    (function() {
        'use strict';

        function EventEmitter() {}
        var proto = EventEmitter.prototype;
        var exports = this;
        var originalGlobalValue = exports.EventEmitter;

        function indexOfListener(listeners, listener) {
            var i = listeners.length;
            while (i--) {
                if (listeners[i].listener === listener) {
                    return i
                }
            }
            return -1
        }
        function alias(name) {
            return function aliasClosure() {
                return this[name].apply(this, arguments)
            }
        }
        proto.getListeners = function getListeners(evt) {
            var events = this._getEvents();
            var response;
            var key;
            if (evt instanceof RegExp) {
                response = {};
                for (key in events) {
                    if (events.hasOwnProperty(key) && evt.test(key)) {
                        response[key] = events[key]
                    }
                }
            } else {
                response = events[evt] || (events[evt] = [])
            }
            return response
        };
        proto.flattenListeners = function flattenListeners(listeners) {
            var flatListeners = [];
            var i;
            for (i = 0; i < listeners.length; i += 1) {
                flatListeners.push(listeners[i].listener)
            }
            return flatListeners
        };
        proto.getListenersAsObject = function getListenersAsObject(evt) {
            var listeners = this.getListeners(evt);
            var response;
            if (listeners instanceof Array) {
                response = {};
                response[evt] = listeners
            }
            return response || listeners
        };
        proto.addListener = function addListener(evt, listener) {
            var listeners = this.getListenersAsObject(evt);
            var listenerIsWrapped = typeof listener === 'object';
            var key;
            for (key in listeners) {
                if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                    listeners[key].push(listenerIsWrapped ? listener : {
                        listener: listener,
                        once: false
                    })
                }
            }
            return this
        };
        proto.on = alias('addListener');
        proto.addOnceListener = function addOnceListener(evt, listener) {
            return this.addListener(evt, {
                listener: listener,
                once: true
            })
        };
        proto.once = alias('addOnceListener');
        proto.defineEvent = function defineEvent(evt) {
            this.getListeners(evt);
            return this
        };
        proto.defineEvents = function defineEvents(evts) {
            for (var i = 0; i < evts.length; i += 1) {
                this.defineEvent(evts[i])
            }
            return this
        };
        proto.removeListener = function removeListener(evt, listener) {
            var listeners = this.getListenersAsObject(evt);
            var index;
            var key;
            for (key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    index = indexOfListener(listeners[key], listener);
                    if (index !== -1) {
                        listeners[key].splice(index, 1)
                    }
                }
            }
            return this
        };
        proto.off = alias('removeListener');
        proto.addListeners = function addListeners(evt, listeners) {
            return this.manipulateListeners(false, evt, listeners)
        };
        proto.removeListeners = function removeListeners(evt, listeners) {
            return this.manipulateListeners(true, evt, listeners)
        };
        proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
            var i;
            var value;
            var single = remove ? this.removeListener : this.addListener;
            var multiple = remove ? this.removeListeners : this.addListeners;
            if (typeof evt === 'object' && !(evt instanceof RegExp)) {
                for (i in evt) {
                    if (evt.hasOwnProperty(i) && (value = evt[i])) {
                        if (typeof value === 'function') {
                            single.call(this, i, value)
                        } else {
                            multiple.call(this, i, value)
                        }
                    }
                }
            } else {
                i = listeners.length;
                while (i--) {
                    single.call(this, evt, listeners[i])
                }
            }
            return this
        };
        proto.removeEvent = function removeEvent(evt) {
            var type = typeof evt;
            var events = this._getEvents();
            var key;
            if (type === 'string') {
                delete events[evt]
            } else if (evt instanceof RegExp) {
                for (key in events) {
                    if (events.hasOwnProperty(key) && evt.test(key)) {
                        delete events[key]
                    }
                }
            } else {
                delete this._events
            }
            return this
        };
        proto.removeAllListeners = alias('removeEvent');
        proto.emitEvent = function emitEvent(evt, args) {
            var listeners = this.getListenersAsObject(evt);
            var listener;
            var i;
            var key;
            var response;
            for (key in listeners) {
                if (listeners.hasOwnProperty(key)) {
                    i = listeners[key].length;
                    while (i--) {
                        listener = listeners[key][i];
                        if (listener.once === true) {
                            this.removeListener(evt, listener.listener)
                        }
                        response = listener.listener.apply(this, args || []);
                        if (response === this._getOnceReturnValue()) {
                            this.removeListener(evt, listener.listener)
                        }
                    }
                }
            }
            return this
        };
        proto.trigger = alias('emitEvent');
        proto.emit = function emit(evt) {
            var args = Array.prototype.slice.call(arguments, 1);
            return this.emitEvent(evt, args)
        };
        proto.setOnceReturnValue = function setOnceReturnValue(value) {
            this._onceReturnValue = value;
            return this
        };
        proto._getOnceReturnValue = function _getOnceReturnValue() {
            if (this.hasOwnProperty('_onceReturnValue')) {
                return this._onceReturnValue
            } else {
                return true
            }
        };
        proto._getEvents = function _getEvents() {
            return this._events || (this._events = {})
        };
        EventEmitter.noConflict = function noConflict() {
            exports.EventEmitter = originalGlobalValue;
            return EventEmitter
        };
        if (typeof define === 'function' && define.amd) {
            define(function() {
                return EventEmitter
            })
        } else if (typeof module === 'object' && module.exports) {
            module.exports = EventEmitter
        } else {
            this.EventEmitter = EventEmitter
        }
    }.call(this));
    (function(window, factory) {
        'use strict';
        if (typeof define === 'function' && define.amd) {
            define(['eventEmitter/EventEmitter', 'eventie/eventie'], function(EventEmitter, eventie) {
                return factory(window, EventEmitter, eventie)
            })
        } else if (typeof exports === 'object') {
            module.exports = factory(window, require('eventEmitter'), require('eventie'))
        } else {
            window.imagesLoaded = factory(window, window.EventEmitter, window.eventie)
        }
    })(this, function factory(window, EventEmitter, eventie) {
        'use strict';
        var $ = window.jQuery;
        var console = window.console;
        var hasConsole = typeof console !== 'undefined';

        function extend(a, b) {
            for (var prop in b) {
                a[prop] = b[prop]
            }
            return a
        }
        var objToString = Object.prototype.toString;

        function isArray(obj) {
            return objToString.call(obj) === '[object Array]'
        }
        function makeArray(obj) {
            var ary = [];
            if (isArray(obj)) {
                ary = obj
            } else if (typeof obj.length === 'number') {
                for (var i = 0, len = obj.length; i < len; i++) {
                    ary.push(obj[i])
                }
            } else {
                ary.push(obj)
            }
            return ary
        }
        function ImagesLoaded(elem, options, onAlways) {
            if (!(this instanceof ImagesLoaded)) {
                return new ImagesLoaded(elem, options)
            }
            if (typeof elem === 'string') {
                elem = document.querySelectorAll(elem)
            }
            this.elements = makeArray(elem);
            this.options = extend({}, this.options);
            if (typeof options === 'function') {
                onAlways = options
            } else {
                extend(this.options, options)
            }
            if (onAlways) {
                this.on('always', onAlways)
            }
            this.getImages();
            if ($) {
                this.jqDeferred = new $.Deferred()
            }
            var _this = this;
            setTimeout(function() {
                _this.check()
            })
        }
        ImagesLoaded.prototype = new EventEmitter();
        ImagesLoaded.prototype.options = {};
        ImagesLoaded.prototype.getImages = function() {
            this.images = [];
            for (var i = 0, len = this.elements.length; i < len; i++) {
                var elem = this.elements[i];
                if (elem.nodeName === 'IMG') {
                    this.addImage(elem)
                }
                var childElems = elem.querySelectorAll('img');
                for (var j = 0, jLen = childElems.length; j < jLen; j++) {
                    var img = childElems[j];
                    this.addImage(img)
                }
            }
        };
        ImagesLoaded.prototype.addImage = function(img) {
            var loadingImage = new LoadingImage(img);
            this.images.push(loadingImage)
        };
        ImagesLoaded.prototype.check = function() {
            var _this = this;
            var checkedCount = 0;
            var length = this.images.length;
            this.hasAnyBroken = false;
            if (!length) {
                this.complete();
                return
            }
            function onConfirm(image, message) {
                if (_this.options.debug && hasConsole) {}
                _this.progress(image);
                checkedCount++;
                if (checkedCount === length) {
                    _this.complete()
                }
                return true
            }
            for (var i = 0; i < length; i++) {
                var loadingImage = this.images[i];
                loadingImage.on('confirm', onConfirm);
                loadingImage.check()
            }
        };
        ImagesLoaded.prototype.progress = function(image) {
            this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
            var _this = this;
            setTimeout(function() {
                _this.emit('progress', _this, image);
                if (_this.jqDeferred && _this.jqDeferred.notify) {
                    _this.jqDeferred.notify(_this, image)
                }
            })
        };
        ImagesLoaded.prototype.complete = function() {
            var eventName = this.hasAnyBroken ? 'fail' : 'done';
            this.isComplete = true;
            var _this = this;
            setTimeout(function() {
                _this.emit(eventName, _this);
                _this.emit('always', _this);
                if (_this.jqDeferred) {
                    var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';
                    _this.jqDeferred[jqMethod](_this)
                }
            })
        };
        if ($) {
            $.fn.imagesLoaded = function(options, callback) {
                var instance = new ImagesLoaded(this, options, callback);
                return instance.jqDeferred.promise($(this))
            }
        }
        function LoadingImage(img) {
            this.img = img
        }
        LoadingImage.prototype = new EventEmitter();
        LoadingImage.prototype.check = function() {
            var resource = cache[this.img.src] || new Resource(this.img.src);
            if (resource.isConfirmed) {
                this.confirm(resource.isLoaded, 'cached was confirmed');
                return
            }
            if (this.img.complete && this.img.naturalWidth !== undefined) {
                this.confirm(this.img.naturalWidth !== 0, 'naturalWidth');
                return
            }
            var _this = this;
            resource.on('confirm', function(resrc, message) {
                _this.confirm(resrc.isLoaded, message);
                return true
            });
            resource.check()
        };
        LoadingImage.prototype.confirm = function(isLoaded, message) {
            this.isLoaded = isLoaded;
            this.emit('confirm', this, message)
        };
        var cache = {};

        function Resource(src) {
            this.src = src;
            cache[src] = this
        }
        Resource.prototype = new EventEmitter();
        Resource.prototype.check = function() {
            if (this.isChecked) {
                return
            }
            var proxyImage = new Image();
            eventie.bind(proxyImage, 'load', this);
            eventie.bind(proxyImage, 'error', this);
            proxyImage.src = this.src;
            this.isChecked = true
        };
        Resource.prototype.handleEvent = function(event) {
            var method = 'on' + event.type;
            if (this[method]) {
                this[method](event)
            }
        };
        Resource.prototype.onload = function(event) {
            this.confirm(true, 'onload');
            this.unbindProxyEvents(event)
        };
        Resource.prototype.onerror = function(event) {
            this.confirm(false, 'onerror');
            this.unbindProxyEvents(event)
        };
        Resource.prototype.confirm = function(isLoaded, message) {
            this.isConfirmed = true;
            this.isLoaded = isLoaded;
            this.emit('confirm', this, message)
        };
        Resource.prototype.unbindProxyEvents = function(event) {
            eventie.unbind(event.target, 'load', this);
            eventie.unbind(event.target, 'error', this)
        };
        return ImagesLoaded
    });

    function OverlayLoader(parent) {
        this.parent = parent;
        this.container;
        this.loadbar;
        this.percentageContainer
    };
    OverlayLoader.prototype.createOverlay = function() {
        var overlayPosition = "absolute";
        if (this.parent.element.tagName.toLowerCase() == "body") {
            overlayPosition = "fixed"
        } else {
            var pos = this.parent.$element.css("position");
            if (pos != "fixed" || pos != "absolute") {
                this.parent.$element.css("position", "relative")
            }
        }
        this.container = $("<div id='" + this.parent.options.overlayId + "'></div>").css({
            width: "100%",
            height: "100%",
            backgroundColor: this.parent.options.backgroundColor,
            backgroundPosition: "fixed",
            position: overlayPosition,
            zIndex: 666999,
            top: 0,
            left: 0
        }).appendTo(this.parent.$element);
        qLheadline = $("<h1 id='qLheadline'></h1>").text("One Space").css({
            'background': "url(images/logo@2x.png) center top no-repeat",
            'background-size': '614px',
            'margin': '80px auto 0 auto',
            width: 614,
            height: 181,
            'text-indent': '-999em',
            'padding-bottom': 20,
            'border-bottom': '3px solid #eee'
        }).appendTo(qLoverlay);
        qLsubhead = $("<h3 id='qLsubhead'></h3>").text("穿在身上的手机娱乐搜索").css({
            fontSize: 50,
            margin: '20px 0',
            fontWeight: "bold",
            textAlign: "center",
            color: "#fff"
        }).appendTo(qLoverlay);
        this.loadbar = $("<div id='qLbar'></div>").css({
            height: this.parent.options.barHeight + "px",
            marginTop: "-" + (this.parent.options.barHeight / 2) + "px",
            backgroundColor: this.parent.options.barColor,
            width: "0%",
            position: "absolute",
            top: "70%",
        }).appendTo(this.container);
        if (this.parent.options.percentage == true) {
            this.percentageContainer = $("<div id='qLpercentage'></div>").text("0%").css({
                height: "40px",
                width: "100px",
                position: "absolute",
                fontSize: "30px",
                fontFamily: 'arial,sans-serif',
                fontWeight: 'bold',
                top: "50%",
                left: "50%",
                marginTop:  ( 130 + this.parent.options.barHeight) + "px",
                textAlign: "center",
                marginLeft: "-50px",
                color: this.parent.options.barColor
            }).appendTo(this.container)
        }
        if (!this.parent.preloadContainer.toPreload.length || this.parent.alreadyLoaded == true) {
            this.parent.destroyContainers()
        }
    };
    OverlayLoader.prototype.updatePercentage = function(percentage) {
        this.loadbar.stop().animate({
            width: percentage + "%",
            minWidth: percentage + "%"
        }, 200);
        if (this.parent.options.percentage == true) {
            this.percentageContainer.text(Math.ceil(percentage) + "%")
        }
    };

    function PreloadContainer(parent) {
        this.toPreload = [];
        this.parent = parent;
        this.container
    };
    PreloadContainer.prototype.create = function() {
        this.container = $("<div></div>").appendTo("body").css({
            display: "none",
            width: 0,
            height: 0,
            overflow: "hidden"
        });
        this.processQueue()
    };
    PreloadContainer.prototype.processQueue = function() {
        for (var i = 0; this.toPreload.length > i; i++) {
            if (!this.parent.destroyed) {
                this.preloadImage(this.toPreload[i])
            }
        }
    };
    PreloadContainer.prototype.addImage = function(src) {
        this.toPreload.push(src)
    };
    PreloadContainer.prototype.preloadImage = function(url) {
        var image = new PreloadImage();
        image.addToPreloader(this, url);
        image.bindLoadEvent()
    };

    function PreloadImage(parent) {
        this.element;
        this.parent = parent
    };
    PreloadImage.prototype.addToPreloader = function(preloader, url) {
        this.element = $("<img />").attr("src", url);
        this.element.appendTo(preloader.container);
        this.parent = preloader.parent
    };
    PreloadImage.prototype.bindLoadEvent = function() {
        this.parent.imageCounter++;
        this.element[0].ref = this;
        new imagesLoaded(this.element, function(e) {
            e.elements[0].ref.completeLoading()
        })
    };
    PreloadImage.prototype.completeLoading = function() {
        this.parent.imageDone++;
        var percentage = (this.parent.imageDone / this.parent.imageCounter) * 100;
        this.parent.overlayLoader.updatePercentage(percentage);
        if (this.parent.imageDone == this.parent.imageCounter || percentage >= 100) {
            this.parent.endLoader()
        }
    };

    function QueryLoader2(element, options) {
        this.element = element;
        this.$element = $(element);
        this.options = options;
        this.foundUrls = [];
        this.destroyed = false;
        this.imageCounter = 0;
        this.imageDone = 0;
        this.alreadyLoaded = false;
        this.preloadContainer = new PreloadContainer(this);
        this.overlayLoader = new OverlayLoader(this);
        this.defaultOptions = {
            onComplete: function() {},
            onLoadComplete: function() {},
            backgroundColor: "#000",
            barColor: "#fff",
            overlayId: 'qLoverlay',
            barHeight: 1,
            percentage: false,
            deepSearch: true,
            completeAnimation: "fade",
            minimumTime: 500
        };
        this.init()
    };
    QueryLoader2.prototype.init = function() {
        this.options = $.extend({}, this.defaultOptions, this.options);
        var images = this.findImageInElement(this.element);
        if (this.options.deepSearch == true) {
            var elements = this.$element.find("*:not(script)");
            for (var i = 0; i < elements.length; i++) {
                this.findImageInElement(elements[i])
            }
        }
        this.preloadContainer.create();
        this.overlayLoader.createOverlay()
    };
    QueryLoader2.prototype.findImageInElement = function(element) {
        var url = "";
        var obj = $(element);
        var type = "normal";
        if (obj.css("background-image") != "none") {
            url = obj.css("background-image");
            type = "background"
        } else if (typeof(obj.attr("src")) != "undefined" && element.nodeName.toLowerCase() == "img") {
            url = obj.attr("src")
        }
        if (!this.hasGradient(url)) {
            url = this.stripUrl(url);
            var urls = url.split(", ");
            for (var i = 0; i < urls.length; i++) {
                if (this.validUrl(urls[i]) && this.urlIsNew(urls[i])) {
                    var extra = "";
                    if (this.isIE() || this.isOpera()) {
                        extra = "?rand=" + Math.random();
                        this.preloadContainer.addImage(urls[i] + extra)
                    } else {
                        if (type == "background") {
                            this.preloadContainer.addImage(urls[i] + extra)
                        } else {
                            var image = new PreloadImage(this);
                            image.element = obj;
                            image.bindLoadEvent()
                        }
                    }
                    this.foundUrls.push(urls[i])
                }
            }
        }
    };
    QueryLoader2.prototype.hasGradient = function(url) {
        if (url.indexOf("gradient") == -1) {
            return false
        } else {
            return true
        }
    };
    QueryLoader2.prototype.stripUrl = function(url) {
        url = url.replace(/url\(\"/g, "");
        url = url.replace(/url\(/g, "");
        url = url.replace(/\"\)/g, "");
        url = url.replace(/\)/g, "");
        return url
    };
    QueryLoader2.prototype.isIE = function() {
        return navigator.userAgent.match(/msie/i)
    };
    QueryLoader2.prototype.isOpera = function() {
        return navigator.userAgent.match(/Opera/i)
    };
    QueryLoader2.prototype.validUrl = function(url) {
        if (url.length > 0 && !url.match(/^(data:)/i)) {
            return true
        } else {
            return false
        }
    };
    QueryLoader2.prototype.urlIsNew = function(url) {
        if (this.foundUrls.indexOf(url) == -1) {
            return true
        } else {
            return false
        }
    };
    QueryLoader2.prototype.destroyContainers = function() {
        this.destroyed = true;
        this.preloadContainer.container.remove();
        this.overlayLoader.container.remove()
    };
    QueryLoader2.prototype.endLoader = function() {
        this.destroyed = true;
        this.onLoadComplete()
    };
    QueryLoader2.prototype.onLoadComplete = function() {
        this.options.onLoadComplete();
        if (this.options.completeAnimation == "grow") {
            var animationTime = this.options.minimumTime;
            this.overlayLoader.loadbar[0].parent = this;
            this.overlayLoader.loadbar.stop().animate({
                "width": "100%"
            }, animationTime, function() {
                $(this).animate({
                    top: "0%",
                    width: "100%",
                    height: "100%"
                }, 500, function() {
                    this.parent.overlayLoader.container[0].parent = this.parent;
                    this.parent.overlayLoader.container.fadeOut(500, function() {
                        this.parent.destroyContainers();
                        this.parent.options.onComplete()
                    })
                })
            })
        } else {
            var animationTime = this.options.minimumTime;
            this.overlayLoader.container[0].parent = this;
            this.overlayLoader.container.fadeOut(animationTime, function() {
                this.parent.destroyContainers();
                this.parent.options.onComplete()
            })
        }
    };
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(elt) {
            var len = this.length >>> 0;
            var from = Number(arguments[1]) || 0;
            from = (from < 0) ? Math.ceil(from) : Math.floor(from);
            if (from < 0) from += len;
            for (; from < len; from++) {
                if (from in this && this[from] === elt) return from
            }
            return -1
        }
    }
    $.fn.queryLoader2 = function(options) {
        return this.each(function() {
            (new QueryLoader2(this, options))
        })
    }
})(jQuery);